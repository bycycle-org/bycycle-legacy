Installation Directions for the byCycle Trip Planner
++++++++++++++++++++++++++++++++++++++++++++++++++++

01/23/2006
09/26/2006


Version
=======

0.4


Changes
=======

- Migrated from MySQL to PostgreSQL
- Using SQLAlchemy to interact with the database instead of using raw SQL
- Using PostGIS for storing and operating on spatial data
- Using the PCL to manipulate geometries in Python
- Moved services into classes that have a common base
- Switched to a reStructuredText style of docstrings
- Cleaned up the route service quite a bit
- Added a unittest test suite for the route service
- Created a Route class


Dependencies
============

There are few pieces of additional software necessary to run the byCycle
system. All of these are free and available for just about any platform.

Core Dependencies
-----------------
- Python 2.4.x <http://www.python.org/>
- PostgreSQL 8.1.x <http://www.postgresql.org/>
- PostGIS 1.1.x <http://postgis.refractions.net/>

- psycopg2 DBAPI module <http://initd.org/tracker/psycopg/wiki/PsycopgTwo>
  easy_install -U psycopg2

- SQLAlchemy (latest) <http://www.sqlalchemy.org/>
  easy_install -U SQLAlchemy
  
- Python Cartographic Library - Core
  - Depends on zope.interface 
    (TODO: Find out how to install just zope.interface without all of zope)
  svn co http://svn.gispython.org/gispy/PCL/trunk PCL
  cd PCL/PCL-Core
  python setup.py install


Web Interface
-------------
- Pylons (latest) <http://pylonshq.com/>
  easy_install -U Pylons

Google Map
----------
If you want to view the Google Map on a local installation, you will need a 
Google Maps API key for the domain name it runs under. 
<http://www.google.com/apis/maps/>.

Deployment
----------
- Apache 2.2.latest <http://httpd.apache.org/>
- mod_python

Other combinations of the above software may work but have not been tested. In
general, we are going to keep up with the latest stable releases of all
supporting software.


Installation
============


Testing
=======


Data
====

Under certain circumstances, the package will be provided with the database
and routing matrix included. In this case, you shouldn't have to do anything
else.

When the data is not supplied, here's what you do to add a new data mode and
its associated travel modes to the model:

- Make sure you have mysqlgisimport (part of libmygis) installed first and that
  it is on your PATH

- Make a new directory in the model for the data and associated scripts
  'mkdir tripplanner/model/timbuktu'

- Create a directory to hold your data files
  'mkdir tripplanner/model/timbuktu/data'

- Put your data files for import (e.g., timbuktu.shp, timbuktu.dbf) in a 
  subdirectory of the data directory. It doesn't really matter what the
  directory is called; just make it something meaningful for you and something
  that will distinguish it from any future versions of your data.

- Copy the files __init__.py and bicycle.py from tripplanner/model/portlandor to
  tripplanner/model/timbuktu/

- Copy the files shp2sql.py and schema.sql from tripplanner/model/portlandor/data
  to tripplanner/model/timbuktu/data

- Here's where it gets hard: now you have to modify schema.sql and shp2sql.py
  to be able to import your data. How you will do this depends on your data. If
  your data is similar to other datasets we've seen, then it will be fairly
  easy; if not, it might be hard, possibly very hard (or just tedious and
  annoying).

- If you get past the above step, you now need to modify __init__.py and
  bicycle.py. You will modify __init__.py to create the adjacency matrix for
  routing. This shouldn't be too difficult. You just need to specify which
  fields from the DB you want to use. To create the adjacency matrix, run
  __init__.py as a script. Next, you will modify bicycle.py to create the
  weight (or cost if you prefer) function using the fields that should now be
  in the adjacency matrix.

If everything went well, you should now be able to look up addresses and find
routes using the data you imported and the files modified as detailed above.

One thing to keep in mind when doing the above is to make sure you keep the
structure the same as the other data modes in the model. In other words, you
want the same directory structure and the same paths, except you'll
change metro to timbuktu and add or remove fields as appropriate to your data.


Problems and Issues
===================

If you have any problems with any of this, please feel free to contact us.

Email: wyatt@bycycle.org

Web Form: http://byCycle.org/contact.html
