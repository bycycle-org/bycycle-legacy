byCycle Trip Planner - Installation
+++++++++++++++++++++++++++++++++++

Created 2006-01-23


Dependencies
============

byCycle is developed on Ubuntu, so this section is Ubuntu-centric.

# On Ubuntu, you'll need to install some basic dev tools:
sudo apt-get install build-essential flex

# Subversion <http://subversion.tigris.org/>
# On Windows, you'll almost definitely also want TortoiseSVN
# <http://tortoisesvn.tigris.org/>
sudo apt-get install subversion

# PostgreSQL 8.2 <http://www.postgresql.org/>
sudo apt-get install postgresql-8.2 libpq-dev postgresql-server-dev-8.2

# GEOS 2.2.3
sudo apt-get install libgeos2c2a libgeos-dev

# Proj 4.5.0
sudo apt-get install proj

# PostGIS
# Depends on Proj and GEOS for some operations
sudo apt-get install postgresql-8.2-postgis


Python and Python Packages
--------------------------

# Python 2.5.1 <http://www.python.org/>
# Python 2.5 is the default Python on Ubuntu
sudo apt-get install python2.5-dev

# setuptools <http://peak.telecommunity.com/DevCenter/setuptools>
wget http://peak.telecommunity.com/dist/ez_setup.py
python2.5 ez_setup.py

# psycopg2 DBAPI module <http://initd.org/tracker/psycopg/wiki/PsycopgTwo>
# Requires python-dev
easy_install -UZ psycopg2

# SQLAlchemy 0.3.8 <http://www.sqlalchemy.org/>
easy_install -UZ SQLAlchemy

# Elixir
easy_install -UZ Elixir

# zope.interface
easy_install -UZ zope.interface 

# Python Cartographic Library (PCL) - Core 0.11.0
# Depends on Proj and GEOS for some operations
# Depends on libgeos-dev
# Depends on zope.interface
wget http://gispython.org/downloads/gispy/PCL-0.11.0.tar.gz
tar xvzf PCL-0.11.0.tar.gz
cd PCL-0.11.0/PCL-Core
python setup.py install

# nose for testing
easy_install nose

Deployment
----------

# Apache <http://httpd.apache.org/>
# Note: Not required for a dev environment--use Paste server

# mod_proxy


Installation of byCycle Core
============================

# Check out the code:
# May require a password? Use guest:guest
svn co http://guest:guest@svn.bycycle.org/byCycle/core/trunk byCycle

# Install in development mode
cd byCycle
python setup.py develop


Installation of Trip Planner Web Application
============================================

TODO: This probably belongs in a different document--i.e., with the Pylons 
app. That doc should start out by saying, "First, install the byCycle core and
its dependencies using the instructions at..."

# Pylons 0.9.6.1 <http://pylonshq.com/>
easy_install -UZ Pylons

# Check out the Trip Planner Pylons Web application:
svn co http://svn.bycycle.org/byCycle/apps/web/tripplanner/trunk tripplanner

# Install in development mode
cd tripplanner
python setup.py develop

# Test it out
cd tripplanner
paster serve --reload development.ini
firefox http://localhost:5000/

# Google Map
# If you want to view the Google Map, you will need a Google Maps API key.
# <http://www.google.com/apis/maps/>.


Testing
=======

...


Data
====

[Warning: This part needs some updating.]

Under certain circumstances, the package will be provided with the database
and routing matrix included. In this case, you shouldn't have to do anything
else.

When the data is not supplied, here's what you do to add a new data mode and
its associated travel modes to the model:

- Make sure you have shp2pgsql (part of PostGIS) installed first and that
  it is on your PATH

- Make a new directory in the model for the data and associated scripts
  'mkdir byCycle/model/timbuktu'

- Create a directory to hold your data files
  'mkdir byCycle/model/timbuktu/data'

- Put your data files for import (e.g., timbuktu.shp, timbuktu.dbf) in a
  subdirectory of the data directory. It doesn't really matter what the
  directory is called; just make it something meaningful for you and something
  that will distinguish it from any future versions of your data.

- Copy the files __init__.py and bicycle.py from byCycle/model/portlandor to
  byCycle/model/timbuktu/

- Copy the files shp2pgsql.py and tables.py from byCycle/model/portlandor/data
  to byCycle/model/timbuktu/data

- Here's where it gets hard: now you have to modify tables.py and shp2pgsql.py
  to be able to import your data. How you will do this depends on your data. If
  your data is similar to other datasets we've seen, then it will be fairly
  easy; if not, it might be hard, possibly very hard (or just tedious and
  annoying).

- If you get past the above step, you now need to modify __init__.py and
  bicycle.py. You will modify __init__.py to create the adjacency matrix for
  routing. This shouldn't be too difficult. You just need to specify which
  fields from the DB you want to use. To create the adjacency matrix, run
  __init__.py as a script. Next, you will modify bicycle.py to create the
  weight (or "cost" if you prefer) function using the fields that should now
  be in the adjacency matrix.

If everything went well, you should now be able to look up addresses and find
routes using the data you imported and the files modified as detailed above.

One thing to keep in mind when doing the above is to make sure you keep the
structure the same as the other data modes in the model. In other words, you
want the same directory structure and the same paths, except you'll
change portlandor to timbuktu and add or remove fields as appropriate to your
data.


Problems and Issues
===================

If you have any problems with any of this, please feel free to contact us.

Email: wyatt@bycycle.org

